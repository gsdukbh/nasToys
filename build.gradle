plugins {
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.graalvm.buildtools.native' version '0.10.6'
    id 'com.google.cloud.tools.jib' version "3.4.5"
    id 'java'
}

group = 'top.werls'
version = '0.0.1-bata'

springBoot {
    buildInfo()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

tasks.named('processResources') {
    filesMatching(['**/application*.properties', '**/application*.yml']) {
        expand(project.properties)
    }
}

jib {
    from {
//        image = 'amazoncorretto:21'
        image = 'gcr.io/distroless/java21-debian12'
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }

    to {
        image = "gsdukbh/${project.name.toLowerCase()}"
        tags = ['latest', version]
        auth {
            username = System.getenv('DOCKER_USERNAME') ?: 'gsdukbh'
            // 从本地文件获取
            def p = ""
            try {
                p = new File('./DOCKER_PASSWORD').text
            } catch (Exception e) {
                println "DOCKER_PASSWORD file not found, using environment variable instead."
            }
            password = System.getenv('DOCKER_PASSWORD') ?: p
        }
    }

    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        ports = ['8080']
        volumes = ['/app/log','/app/db.sqlite']
        workingDirectory= '/app'
        environment = [JAVA_TOOL_OPTIONS: '-XX:+UseContainerSupport -XX:MaxRAMPercentage=80.0']
    }
}

dependencies {

    implementation 'org.xerial:sqlite-jdbc:3.50.2.0'
// https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-community-dialects
    implementation 'org.hibernate.orm:hibernate-community-dialects:7.0.4.Final'

    implementation "com.google.code.gson:gson:2.13.1"
    implementation "org.apache.commons:commons-lang3:3.12.0"

    // spring doc https://springdoc.org
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // jwt
    def jwtVersion = '0.12.5'
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-gson:${jwtVersion}"


    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
